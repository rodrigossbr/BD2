package br.com.bd2.repositories.Base;

import java.lang.reflect.ParameterizedType;
import java.util.Collection;
import java.util.List;
import java.util.function.Predicate;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author Rodrigo
 * @param <T>
 */
public abstract class Repository<T> implements IRepository<T>{

    @Override
    public Collection<T> Select() {
        Session session = RepositorySession.Open();
        try{
            Criteria cri = session.createCriteria(this.getType());
            return cri.list();
        }catch(HibernateException e){
            throw e;
        }
    }
    
    @Override
    public Collection<T> Select(Predicate<T> conditions) {
        Session session = RepositorySession.Open();
        try{
            Criteria cri = session.createCriteria(this.getType());
            List<T> list = cri.list();
            list.removeIf(c -> !conditions.test(c));
            return list;
        }catch(HibernateException e){
            throw e;
        }
    }

    @Override
    public void Insert(T entity) {
        Session session = RepositorySession.Open();
        Transaction transaction = session.beginTransaction();
        try{
            session.save(entity);
            transaction.commit();
        }catch(Exception e){
            if(!transaction.wasCommitted()){
                transaction.rollback();
            }
            throw e;
        }finally{
           session.close();
        }
    }

    @Override
    public void Update(T entity) {
        Session session = RepositorySession.Open();
        Transaction transaction = session.beginTransaction();
        try{
            session.update(entity);
            transaction.commit();
        }catch(Exception e){
            if(!transaction.wasCommitted()){
                transaction.rollback();
            }
            throw e;
        }finally{
            session.close();
        }
    }

    @Override
    public void Delete(T entity) {
        Session session = RepositorySession.Open();
        Transaction transaction = session.beginTransaction();
        try{
            session.delete(entity);
            transaction.commit();
        }catch(Exception e){
            if(!transaction.wasCommitted()){
                transaction.rollback();
            }
            throw e;
        }finally{
            session.close();
        }
    }
    
    public void Delete(Predicate<T> conditions){
        Session session = RepositorySession.Open();
        Transaction transaction = session.beginTransaction();
        Criteria cri = session.createCriteria(this.getType());
        List<T> list = cri.list();
        list.removeIf(c -> !conditions.test(c));
        try{
            list.forEach(e -> session.delete(e));
            transaction.commit();
        }catch(Exception e){
            if(!transaction.wasCommitted()){
                transaction.rollback();
            }
            throw e;
        }finally{
            session.close();
        }
    }
    
    private Class<T> getType(){
        final ParameterizedType type = (ParameterizedType) getClass().getGenericSuperclass();
        Class<T> classType = (Class<T>) (type).getActualTypeArguments()[0]; 
        return classType;
    }
    
}